// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	And(a=instruction[15], b=true, out=cInstruction);
	Not(in=cInstruction, out=aInstruction);
	
	Mux16(a[0..14]=instruction[0..14], a[15]=false, b=aluOut, sel=cInstruction, out=inAReg);
	
   	//d1 d2 d3
	//i5 i4 i3 where i is instrucuction and n is a bit
	//AReg DReg MemA
 	ARegister(in=inAReg, load=instruction[5], out=outAReg, out=outAReg1, out[0..14]=addressM);
	
	//read M if i12 is true, else A
	Mux16(a=outAReg, b=inM, sel=instruction[12], out=AMin);
	
	DRegister(in=aluOut1, load=instruction[4] , out=dOut);
	
	ALU(x=AMin, y=dOut, zx=instruction[11] ,nx=instruction[10], 
	zy=instruction[9], ny=instruction[8],
	f=instruction[7], no=instruction[6], 
	out=aluOut, out=aluOut1, out=outM, zr=outZero, zr=outZero1, ng=outNeg, ng=outNeg1);
	
	//Write to M
	And(a=true, b=instruction[3], out=writeM);
	
	And(a=instruction[2], b=outNeg, out=jump1);
	And(a=instruction[1], b=outZero, out=jump2);
	Or(a=outZero1, b=outNeg1, out=isZeroOrLess);
	Not(in=isZeroOrLess, out=moreZero);
	And(a=instruction[0], b=moreZero, out=jump3);
	
	Or(a=jump1, b=jump2, out=jump4);
	Or(a=jump3, b=jump4, out=jump, out=forNotJump);
	Not(in=forNotJump, out=notJump);
	
	PC(in=outAReg1, reset=reset ,inc=notJump, load=jump, out[0..14]=pc);
}